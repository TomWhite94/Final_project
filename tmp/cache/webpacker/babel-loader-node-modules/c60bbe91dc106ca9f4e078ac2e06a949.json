{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTypeaheadContext } from '../core/Context';\nimport { getDisplayName, getMenuItemId, preventInputBlur, warn } from '../utils';\nimport { optionType } from '../propTypes';\nvar propTypes = {\n  option: optionType.isRequired,\n  position: PropTypes.number\n};\nexport var useItem = function useItem(_ref) {\n  var label = _ref.label,\n      option = _ref.option,\n      position = _ref.position,\n      props = _objectWithoutPropertiesLoose(_ref, [\"label\", \"option\", \"position\"]);\n\n  var _useTypeaheadContext = useTypeaheadContext(),\n      activeIndex = _useTypeaheadContext.activeIndex,\n      id = _useTypeaheadContext.id,\n      isOnlyResult = _useTypeaheadContext.isOnlyResult,\n      onActiveItemChange = _useTypeaheadContext.onActiveItemChange,\n      onInitialItemChange = _useTypeaheadContext.onInitialItemChange,\n      onMenuItemClick = _useTypeaheadContext.onMenuItemClick,\n      setItem = _useTypeaheadContext.setItem;\n\n  var itemRef = useRef(null);\n  useEffect(function () {\n    if (position === 0) {\n      onInitialItemChange(option);\n    }\n  }, [position]);\n  useEffect(function () {\n    if (position === activeIndex) {\n      onActiveItemChange(option); // Automatically scroll the menu as the user keys through it.\n\n      var node = itemRef.current;\n      node && scrollIntoView(node, {\n        block: 'nearest',\n        boundary: node.parentNode,\n        inline: 'nearest',\n        scrollMode: 'if-needed'\n      });\n    }\n  }, [activeIndex, position]);\n  var onClick = useCallback(function (e) {\n    onMenuItemClick(option, e);\n    props.onClick && props.onClick(e);\n  });\n  var active = isOnlyResult || activeIndex === position; // Update the item's position in the item stack.\n\n  setItem(option, position);\n  return _extends({}, props, {\n    active: active,\n    'aria-label': label,\n    'aria-selected': active,\n    id: getMenuItemId(id, position),\n    onClick: onClick,\n    onMouseDown: preventInputBlur,\n    ref: itemRef,\n    role: 'option'\n  });\n};\nexport var withItem = function withItem(Component) {\n  var displayName = \"withItem(\" + getDisplayName(Component) + \")\";\n\n  var WrappedMenuItem = function WrappedMenuItem(props) {\n    return /*#__PURE__*/React.createElement(Component, useItem(props));\n  };\n\n  WrappedMenuItem.displayName = displayName;\n  WrappedMenuItem.propTypes = propTypes;\n  return WrappedMenuItem;\n};\nexport default function menuItemContainer(Component) {\n  /* istanbul ignore next */\n  warn(false, 'The `menuItemContainer` export is deprecated; use `withItem` instead.');\n  /* istanbul ignore next */\n\n  return withItem(Component);\n}","map":null,"metadata":{},"sourceType":"module"}