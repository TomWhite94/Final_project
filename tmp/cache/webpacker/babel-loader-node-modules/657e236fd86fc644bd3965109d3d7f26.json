{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport invariant from 'invariant';\nimport React, { cloneElement, useCallback, useEffect, useRef } from 'react';\nimport { useTypeaheadContext } from '../core/Context';\nimport { isSelectable } from '../utils';\nimport { RETURN, RIGHT, TAB } from '../constants'; // IE doesn't seem to get the composite computed value (eg: 'padding',\n// 'borderStyle', etc.), so generate these from the individual values.\n\nfunction interpolateStyle(styles, attr, subattr) {\n  if (subattr === void 0) {\n    subattr = '';\n  } // Title-case the sub-attribute.\n\n\n  if (subattr) {\n    /* eslint-disable-next-line no-param-reassign */\n    subattr = subattr.replace(subattr[0], subattr[0].toUpperCase());\n  }\n\n  return ['Top', 'Right', 'Bottom', 'Left'].map(function (dir) {\n    return styles[attr + dir + subattr];\n  }).join(' ');\n}\n\nfunction copyStyles(inputNode, hintNode) {\n  if (!inputNode || !hintNode) {\n    return;\n  }\n\n  var inputStyle = window.getComputedStyle(inputNode);\n  /* eslint-disable no-param-reassign */\n\n  hintNode.style.borderStyle = interpolateStyle(inputStyle, 'border', 'style');\n  hintNode.style.borderWidth = interpolateStyle(inputStyle, 'border', 'width');\n  hintNode.style.fontSize = inputStyle.fontSize;\n  hintNode.style.height = inputStyle.height;\n  hintNode.style.lineHeight = inputStyle.lineHeight;\n  hintNode.style.margin = interpolateStyle(inputStyle, 'margin');\n  hintNode.style.padding = interpolateStyle(inputStyle, 'padding');\n  /* eslint-enable no-param-reassign */\n}\n\nexport function defaultShouldSelect(e, state) {\n  var shouldSelectHint = false;\n  var currentTarget = e.currentTarget,\n      keyCode = e.keyCode;\n\n  if (keyCode === RIGHT) {\n    // For selectable input types (\"text\", \"search\"), only select the hint if\n    // it's at the end of the input value. For non-selectable types (\"email\",\n    // \"number\"), always select the hint.\n    shouldSelectHint = isSelectable(currentTarget) ? currentTarget.selectionStart === currentTarget.value.length : true;\n  }\n\n  if (keyCode === TAB) {\n    // Prevent input from blurring on TAB.\n    e.preventDefault();\n    shouldSelectHint = true;\n  }\n\n  if (keyCode === RETURN) {\n    shouldSelectHint = !!state.selectHintOnEnter;\n  }\n\n  return typeof state.shouldSelect === 'function' ? state.shouldSelect(shouldSelectHint, e) : shouldSelectHint;\n}\nexport var useHint = function useHint(_ref) {\n  var children = _ref.children,\n      shouldSelect = _ref.shouldSelect;\n  !(React.Children.count(children) === 1) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '`useHint` expects one child.') : invariant(false) : void 0;\n\n  var _useTypeaheadContext = useTypeaheadContext(),\n      hintText = _useTypeaheadContext.hintText,\n      initialItem = _useTypeaheadContext.initialItem,\n      inputNode = _useTypeaheadContext.inputNode,\n      onAdd = _useTypeaheadContext.onAdd,\n      selectHintOnEnter = _useTypeaheadContext.selectHintOnEnter;\n\n  var hintRef = useRef(null);\n  var onKeyDown = useCallback(function (e) {\n    if (hintText && initialItem && defaultShouldSelect(e, {\n      selectHintOnEnter: selectHintOnEnter,\n      shouldSelect: shouldSelect\n    })) {\n      onAdd(initialItem);\n    }\n\n    children.props.onKeyDown && children.props.onKeyDown(e);\n  });\n  useEffect(function () {\n    copyStyles(inputNode, hintRef.current);\n  });\n  return {\n    child: /*#__PURE__*/cloneElement(children, _extends({}, children.props, {\n      onKeyDown: onKeyDown\n    })),\n    hintRef: hintRef,\n    hintText: hintText\n  };\n};\n\nvar Hint = function Hint(_ref2) {\n  var className = _ref2.className,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"className\"]);\n\n  var _useHint = useHint(props),\n      child = _useHint.child,\n      hintRef = _useHint.hintRef,\n      hintText = _useHint.hintText;\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    style: {\n      display: 'flex',\n      flex: 1,\n      height: '100%',\n      position: 'relative'\n    }\n  }, child, /*#__PURE__*/React.createElement(\"input\", {\n    \"aria-hidden\": true,\n    className: \"rbt-input-hint\",\n    ref: hintRef,\n    readOnly: true,\n    style: {\n      backgroundColor: 'transparent',\n      borderColor: 'transparent',\n      boxShadow: 'none',\n      color: 'rgba(0, 0, 0, 0.35)',\n      left: 0,\n      pointerEvents: 'none',\n      position: 'absolute',\n      top: 0,\n      width: '100%'\n    },\n    tabIndex: -1,\n    value: hintText\n  }));\n};\n\nexport default Hint;","map":null,"metadata":{},"sourceType":"module"}