{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React, { Fragment, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Highlighter from './Highlighter';\nimport Menu from './Menu';\nimport MenuItem from './MenuItem';\nimport { getOptionLabel, getOptionProperty } from '../utils';\nvar propTypes = {\n  /**\n   * Provides the ability to specify a prefix before the user-entered text to\n   * indicate that the selection will be new. No-op unless `allowNew={true}`.\n   */\n  newSelectionPrefix: PropTypes.node,\n\n  /**\n   * Prompt displayed when large data sets are paginated.\n   */\n  paginationText: PropTypes.node,\n\n  /**\n   * Provides a hook for customized rendering of menu item contents.\n   */\n  renderMenuItemChildren: PropTypes.func\n};\nvar defaultProps = {\n  newSelectionPrefix: 'New selection: ',\n  paginationText: 'Display additional results...',\n  renderMenuItemChildren: function renderMenuItemChildren(option, props, idx) {\n    return /*#__PURE__*/React.createElement(Highlighter, {\n      search: props.text\n    }, getOptionLabel(option, props.labelKey));\n  }\n};\n\nvar TypeaheadMenu = function TypeaheadMenu(props) {\n  var labelKey = props.labelKey,\n      newSelectionPrefix = props.newSelectionPrefix,\n      options = props.options,\n      paginationText = props.paginationText,\n      renderMenuItemChildren = props.renderMenuItemChildren,\n      text = props.text,\n      menuProps = _objectWithoutPropertiesLoose(props, [\"labelKey\", \"newSelectionPrefix\", \"options\", \"paginationText\", \"renderMenuItemChildren\", \"text\"]);\n\n  var renderMenuItem = useCallback(function (option, position) {\n    var label = getOptionLabel(option, labelKey);\n    var menuItemProps = {\n      disabled: getOptionProperty(option, 'disabled'),\n      label: label,\n      option: option,\n      position: position\n    };\n\n    if (option.customOption) {\n      return /*#__PURE__*/React.createElement(MenuItem, _extends({}, menuItemProps, {\n        className: \"rbt-menu-custom-option\",\n        key: position,\n        label: newSelectionPrefix + label\n      }), newSelectionPrefix, /*#__PURE__*/React.createElement(Highlighter, {\n        search: text\n      }, label));\n    }\n\n    if (option.paginationOption) {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        key: \"pagination-item\"\n      }, /*#__PURE__*/React.createElement(Menu.Divider, null), /*#__PURE__*/React.createElement(MenuItem, _extends({}, menuItemProps, {\n        className: \"rbt-menu-pagination-option\",\n        label: paginationText\n      }), paginationText));\n    }\n\n    return /*#__PURE__*/React.createElement(MenuItem, _extends({}, menuItemProps, {\n      key: position\n    }), renderMenuItemChildren(option, props, position));\n  });\n  return (\n    /*#__PURE__*/\n    // Explictly pass `text` so Flow doesn't complain...\n    React.createElement(Menu, _extends({}, menuProps, {\n      text: text\n    }), options.map(renderMenuItem))\n  );\n};\n\nTypeaheadMenu.propTypes = propTypes;\nTypeaheadMenu.defaultProps = defaultProps;\nexport default TypeaheadMenu;","map":null,"metadata":{},"sourceType":"module"}