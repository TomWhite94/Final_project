{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport useRootClose from \"react-overlays/useRootClose\";\nimport { getDisplayName, isFunction, warn } from '../utils';\nimport { BACKSPACE } from '../constants';\nimport { optionType } from '../propTypes';\nvar propTypes = {\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onRemove: PropTypes.func,\n  option: optionType.isRequired\n};\nexport var useToken = function useToken(_ref) {\n  var onBlur = _ref.onBlur,\n      onClick = _ref.onClick,\n      onFocus = _ref.onFocus,\n      onRemove = _ref.onRemove,\n      option = _ref.option,\n      props = _objectWithoutPropertiesLoose(_ref, [\"onBlur\", \"onClick\", \"onFocus\", \"onRemove\", \"option\"]);\n\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(null),\n      rootElement = _useState2[0],\n      attachRef = _useState2[1];\n\n  var handleActiveChange = function handleActiveChange(e, isActive, callback) {\n    e.stopPropagation();\n    setActive(isActive);\n    typeof callback === 'function' && callback(e);\n  };\n\n  var handleBlur = function handleBlur(e) {\n    handleActiveChange(e, false, onBlur);\n  };\n\n  var handleClick = function handleClick(e) {\n    handleActiveChange(e, true, onClick);\n  };\n\n  var handleFocus = function handleFocus(e) {\n    handleActiveChange(e, true, onFocus);\n  };\n\n  var handleRemove = function handleRemove() {\n    onRemove && onRemove(option);\n  };\n\n  var handleKeyDown = function handleKeyDown(e) {\n    switch (e.keyCode) {\n      case BACKSPACE:\n        if (active) {\n          // Prevent backspace keypress from triggering the browser \"back\"\n          // action.\n          e.preventDefault();\n          handleRemove();\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  useRootClose(rootElement, handleBlur, _extends({}, props, {\n    disabled: !active\n  }));\n  return _extends({}, props, {\n    active: active,\n    onBlur: handleBlur,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onKeyDown: handleKeyDown,\n    onRemove: isFunction(onRemove) ? handleRemove : undefined,\n    ref: attachRef\n  });\n};\nexport var withToken = function withToken(Component) {\n  var displayName = \"withToken(\" + getDisplayName(Component) + \")\";\n\n  var WrappedToken = function WrappedToken(props) {\n    return /*#__PURE__*/React.createElement(Component, useToken(props));\n  };\n\n  WrappedToken.displayName = displayName;\n  WrappedToken.propTypes = propTypes;\n  return WrappedToken;\n};\nexport default function tokenContainer(Component) {\n  /* istanbul ignore next */\n  warn(false, 'The `tokenContainer` export is deprecated; use `withToken` instead.');\n  /* istanbul ignore next */\n\n  return withToken(Component);\n}","map":null,"metadata":{},"sourceType":"module"}